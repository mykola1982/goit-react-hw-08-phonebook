{"version":3,"file":"static/js/96.8722c4a1.chunk.js","mappings":"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","sources":["components/Section/Section.styled.jsx","components/Section/Section.jsx","redux/contacts/contactsSelectors.js","components/Filter/Filter.styled.jsx","components/Filter/Filter.jsx","pages/Contacts/Contacts.styled.jsx","components/Modal/Modal.styled.jsx","components/Modal/Modal.jsx","components/EditForm/EditForm.styled.jsx","components/EditForm/EditForm.jsx","components/ContactItem/ContactItem.styled.jsx","components/ContactItem/ContactItem.jsx","components/ContactList/ContactList.styled.jsx","components/ContactList/ContactList.jsx","components/Loader/Loader.styled.jsx","components/Loader/Loader.jsx","components/ContactForm/ContactForm.styled.jsx","components/ContactForm/ContactForm.jsx","components/AddButton/AddButton.styled.jsx","components/AddButton/AddButton.jsx","pages/Contacts/Contacts.jsx"],"sourcesContent":["import styled from '@emotion/styled';\n\nexport const SectionStyled = styled.section`\n  padding-top: 30px;\n  padding-bottom: 15px;\n`;\n\nexport const SectionTitle = styled.h2`\n  font-weight: 700;\n  font-size: 36px;\n  line-height: 42px;\n  text-align: center;\n  letter-spacing: 0.03em;\n  color: #212121;\n  margin-bottom: 12px;\n`;\n","import PropTypes from 'prop-types';\nimport { SectionStyled, SectionTitle } from './Section.styled';\n\nexport const Section = ({ title, children }) => {\n  return (\n    <SectionStyled>\n      <SectionTitle>{title}</SectionTitle>\n      {children}\n    </SectionStyled>\n  );\n};\n\nSection.propTypes = {\n  title: PropTypes.string.isRequired,\n  children: PropTypes.node.isRequired,\n};\n","import { createSelector } from '@reduxjs/toolkit';\n\nexport const selectContacts = state => state.contacts.items;\nexport const selectContactsIsLoading = state =>\n  state.contacts.contactsIsLoading;\nexport const selectContactsError = state => state.contacts.contactsError;\nexport const selectContactsFilter = state => state.filter;\n\nexport const selectVisibleContacts = createSelector(\n  [selectContacts, selectContactsFilter],\n  (contacts, filter) => {\n    const normalizedFilter = filter.toLowerCase();\n\n    return contacts.filter(contact =>\n      contact.name.toLowerCase().includes(normalizedFilter)\n    );\n  }\n);\n","import styled from '@emotion/styled';\n\nexport const FilterStyled = styled.div`\n  width: 800px;\n  margin: 0 auto;\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n  gap: 12px;\n  margin-bottom: 16px;\n`;\n\nexport const Label = styled.label`\n  font-weight: 500;\n  font-size: 22px;\n  line-height: 1.16;\n`;\n\nexport const Input = styled.input`\n  font-size: 18px;\n  line-height: 1.16;\n  width: 300px;\n  height: 26px;\n  border: 2px solid #212121;\n  border-radius: 4px;\n  outline: none;\n  padding: 8px 16px;\n  transition: border-color 250ms linear;\n\n  :hover,\n  :focus {\n    border-color: orange;\n  }\n`;\n","import { useDispatch, useSelector } from 'react-redux';\nimport { setFilterContacts } from 'redux/filterSlice';\nimport { selectContactsFilter } from 'redux/contacts/contactsSelectors';\n\nimport { FilterStyled, Input, Label } from './Filter.styled';\n\nexport const Filter = () => {\n  const filter = useSelector(selectContactsFilter);\n  const dispatch = useDispatch();\n  return (\n    <FilterStyled>\n      <Label>Find contact by name</Label>\n      <Input\n        type=\"text\"\n        name=\"filter\"\n        value={filter}\n        onChange={event =>\n          dispatch(setFilterContacts(event.currentTarget.value))\n        }\n      />\n    </FilterStyled>\n  );\n};\n","import styled from '@emotion/styled';\n\nexport const Container = styled.div`\n  width: 1200px;\n  margin: 0 auto;\n  padding-left: 15px;\n  padding-right: 15px;\n`;\n\nexport const Text = styled.div`\n  font-weight: 500;\n  font-size: 24px;\n  line-height: 26px;\n  text-align: center;\n  letter-spacing: 0.03em;\n  color: #212121;\n  margin-bottom: 12px;\n`;\n","import styled from '@emotion/styled';\n\nexport const ModalBackdrop = styled.div`\n  position: fixed;\n  top: 0;\n  left: 0;\n  width: 100vw;\n  height: 100vh;\n  background-color: rgba(0, 0, 0, 0.5);\n`;\n\nexport const ModalContet = styled.div`\n  position: absolute;\n\n  display: flex;\n\n  align-items: center;\n  justify-content: center;\n\n  top: 50%;\n  left: 50%;\n  transform: translate(-50%, -50%);\n  height: 300px;\n  max-width: 450px;\n  width: 100%;\n  background-color: #fff;\n  box-shadow: 0px 1px 3px rgba(0, 0, 0, 0.12), 0px 1px 1px rgba(0, 0, 0, 0.14),\n    0px 2px 1px rgba(0, 0, 0, 0.2);\n  border-radius: 4px;\n  border: 2px solid #fff;\n`;\n","import { useEffect } from 'react';\nimport PropTypes from 'prop-types';\nimport { ModalBackdrop, ModalContet } from './Modal.styled';\nimport { createPortal } from 'react-dom';\n// import { ContactForm } from 'components/ContactForm';\n\nconst modalRoot = document.querySelector('#modal-root');\n\nexport const Modal = ({ children, onClose }) => {\n  useEffect(() => {\n    const hendelKeyDown = e => {\n      if (e.code === 'Escape') {\n        onClose();\n      }\n    };\n\n    window.addEventListener('keydown', hendelKeyDown);\n\n    return () => {\n      window.removeEventListener('keydown', hendelKeyDown);\n    };\n  }, [onClose]);\n\n  const hendleBackdropClick = e => {\n    if (e.target === e.currentTarget) {\n      onClose();\n    }\n  };\n\n  return createPortal(\n    <ModalBackdrop onClick={hendleBackdropClick}>\n      <ModalContet>\n        {children}\n        {/* <ContactForm onClose={onClose} /> */}\n      </ModalContet>\n    </ModalBackdrop>,\n    modalRoot\n  );\n};\n\nModal.propTypes = {\n  children: PropTypes.node.isRequired,\n  onClose: PropTypes.func.isRequired,\n};\n","import { Form, Field, ErrorMessage } from 'formik';\nimport styled from '@emotion/styled';\n\nexport const StyledForm = styled(Form)`\n  width: 800px;\n  margin: 0 auto;\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n  gap: 12px;\n`;\n\nexport const Label = styled.label`\n  font-weight: 500;\n  font-size: 22px;\n  line-height: 1.16;\n`;\n\nexport const Input = styled(Field)`\n  font-size: 18px;\n  line-height: 1.16;\n  width: 300px;\n  height: 26px;\n  border: 2px solid #212121;\n  border-radius: 4px;\n  outline: none;\n  padding: 8px 16px;\n  transition: border-color 250ms linear;\n\n  :hover,\n  :focus {\n    border-color: orange;\n  }\n`;\n\nexport const StyledErrorMessage = styled(ErrorMessage)`\n  font-size: 16px;\n  font-weight: 700;\n  line-height: 1.16;\n  color: red;\n`;\n\nexport const Button = styled.button`\n  height: 40px;\n  width: 150px;\n  padding: 8px;\n  background-color: orange;\n  border-radius: 4px;\n  border: 2px solid #fff;\n  color: #fff;\n  font-weight: 700;\n  font-size: 16px;\n  line-height: 1.16;\n  text-align: center;\n  letter-spacing: 0.03em;\n  transition: background-color 250ms linear, color 250ms linear,\n    box-shadow 250ms linear;\n  :hover,\n  :focus {\n    box-shadow: 0px 4px 4px rgba(0, 0, 0, 0.15);\n    background-color: #fff;\n    color: orange;\n  }\n`;\n","import PropTypes from 'prop-types';\nimport { useDispatch } from 'react-redux';\nimport { addContact } from 'redux/contacts/contactsOperations';\nimport { useSelector } from 'react-redux/es/exports';\nimport { selectContacts } from 'redux/contacts/contactsSelectors';\nimport { toast } from 'react-toastify';\n\nimport { nanoid } from 'nanoid';\nimport { Formik } from 'formik';\nimport * as yup from 'yup';\nimport 'yup-phone';\n\nimport {\n  StyledForm,\n  Label,\n  Input,\n  StyledErrorMessage,\n  Button,\n} from './EditForm.styled';\n\nconst schema = yup.object().shape({\n  name: yup.string().required('This field is required'),\n  number: yup\n    .string()\n    .phone(null, true, 'Enter your phone number in the format +000000000000')\n    .required(),\n});\n\nconst idInputName = nanoid();\nconst idInputNumber = nanoid();\n\nconst initialValues = {\n  name: '',\n  number: '',\n};\n\nexport const EditForm = ({ onClose }) => {\n  const contacts = useSelector(selectContacts);\n  const dispatch = useDispatch();\n\n  const handleSubmit = ({ name, number }, { resetForm }) => {\n    const hasName = contacts.some(\n      contact => contact.name.toLowerCase() === name.toLowerCase()\n    );\n\n    if (hasName) {\n      toast.error(`${name} is alredy in contacts`);\n      return;\n    }\n\n    dispatch(addContact({ name, number }));\n    onClose();\n    resetForm();\n  };\n\n  return (\n    <Formik\n      initialValues={initialValues}\n      validationSchema={schema}\n      onSubmit={handleSubmit}\n    >\n      <StyledForm>\n        <Label htmlFor={idInputName}>Name</Label>\n        <Input id={idInputName} type=\"text\" name=\"name\" placeholder=\"Name\" />\n        <StyledErrorMessage name=\"name\" component=\"p\" />\n\n        <Label htmlFor={idInputNumber}>Number</Label>\n        <Input\n          id={idInputNumber}\n          type=\"tel\"\n          name=\"number\"\n          placeholder=\"+0000000000000\"\n        />\n        <StyledErrorMessage name=\"number\" component=\"p\" />\n\n        <Button type=\"submit\">Edit contact</Button>\n      </StyledForm>\n    </Formik>\n  );\n};\n\nEditForm.propTypes = {\n  onClose: PropTypes.func.isRequired,\n};\n","import styled from '@emotion/styled';\nimport { MdDeleteForever, MdModeEditOutline } from 'react-icons/md';\n\nexport const Item = styled.li`\n  display: flex;\n  align-items: center;\n  justify-content: space-around;\n  padding: 8px;\n  background-color: rgba(192, 192, 192, 0.5);\n  border-radius: 8px;\n  font-size: 20px;\n  line-height: 1.16;\n\n  > ul {\n    display: flex;\n    gap: 16px;\n  }\n`;\n\nexport const Button = styled.button`\n  display: flex;\n  align-items: center;\n  justify-content: center;\n\n  height: 40px;\n  width: 40px;\n\n  background-color: orange;\n  border-radius: 50%;\n  border: 2px solid #fff;\n  color: #fff;\n  font-weight: 700;\n  font-size: 16px;\n  line-height: 1.16;\n  text-align: center;\n  letter-spacing: 0.03em;\n  transition: background-color 250ms linear, color 250ms linear,\n    box-shadow 250ms linear;\n  :hover,\n  :focus {\n    box-shadow: 0px 4px 4px rgba(0, 0, 0, 0.15);\n    background-color: #fff;\n    color: orange;\n  }\n`;\n\nexport const IconDel = styled(MdDeleteForever)`\n  width: 24px;\n  height: 24px;\n`;\n\nexport const IconEdit = styled(MdModeEditOutline)`\n  width: 24px;\n  height: 24px;\n`;\n","import { useState } from 'react';\nimport { Modal } from 'components/Modal';\nimport { useDispatch } from 'react-redux/es/exports';\nimport { deleteContact } from 'redux/contacts/contactsOperations';\nimport Avatar from 'react-avatar';\n\nimport { EditForm } from 'components/EditForm/EditForm';\nimport PropTypes from 'prop-types';\nimport { Item, Button, IconDel, IconEdit } from './ContactItem.styled';\n\nexport const ContactItem = ({ id, name, number }) => {\n  const dispatch = useDispatch();\n\n  const [showModal, setShowmodal] = useState(false);\n\n  const openModal = () => {\n    setShowmodal(true);\n  };\n  const closeModal = () => {\n    setShowmodal(false);\n  };\n\n  return (\n    <>\n      <Item>\n        <Avatar name={name} size=\"50\" round={true} />\n        <p>\n          {name}:&nbsp;{number}\n        </p>\n        <ul>\n          <li>\n            <Button type=\"button\" onClick={openModal}>\n              <IconEdit />\n            </Button>\n          </li>\n          <li>\n            <Button type=\"button\" onClick={() => dispatch(deleteContact(id))}>\n              <IconDel />\n            </Button>\n          </li>\n        </ul>\n      </Item>\n\n      {showModal && (\n        <Modal onClose={closeModal}>\n          <EditForm onClose={closeModal} />\n        </Modal>\n      )}\n    </>\n  );\n};\n\nContactItem.propTypes = {\n  id: PropTypes.string.isRequired,\n  name: PropTypes.string.isRequired,\n  number: PropTypes.string.isRequired,\n};\n","import styled from '@emotion/styled';\n\nexport const List = styled.ul`\n  display: flex;\n  flex-direction: column;\n  gap: 16px;\n  width: 650px;\n  margin: 0 auto;\n`;\n","import { useSelector } from 'react-redux/es/exports';\nimport { selectVisibleContacts } from 'redux/contacts/contactsSelectors';\n\nimport { ContactItem } from 'components/ContactItem';\nimport { List } from './ContactList.styled';\n\nexport const ContactList = () => {\n  const contacts = useSelector(selectVisibleContacts);\n\n  return (\n    <List>\n      {contacts.map(({ name, id, number }) => {\n        return <ContactItem key={id} id={id} name={name} number={number} />;\n      })}\n    </List>\n  );\n};\n","import styled from '@emotion/styled';\n\nexport const StyledLoader = styled.div`\n  display: flex;\n  justify-content: center;\n`;\n","import { ThreeCircles } from 'react-loader-spinner';\nimport { StyledLoader } from './Loader.styled';\n\nexport const Loader = () => {\n  return (\n    <StyledLoader>\n      <ThreeCircles\n        height=\"100\"\n        width=\"100\"\n        color=\"#FF6600\"\n        wrapperStyle={{}}\n        wrapperClass=\"\"\n        visible={true}\n        ariaLabel=\"three-circles-rotating\"\n        outerCircleColor=\"\"\n        innerCircleColor=\"\"\n        middleCircleColor=\"\"\n      />\n      ;\n    </StyledLoader>\n  );\n};\n","import { Form, Field, ErrorMessage } from 'formik';\nimport styled from '@emotion/styled';\n\nexport const StyledForm = styled(Form)`\n  width: 800px;\n  margin: 0 auto;\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n  gap: 12px;\n`;\n\nexport const Label = styled.label`\n  font-weight: 500;\n  font-size: 22px;\n  line-height: 1.16;\n`;\n\nexport const Input = styled(Field)`\n  font-size: 18px;\n  line-height: 1.16;\n  width: 300px;\n  height: 26px;\n  border: 2px solid #212121;\n  border-radius: 4px;\n  outline: none;\n  padding: 8px 16px;\n  transition: border-color 250ms linear;\n\n  :hover,\n  :focus {\n    border-color: orange;\n  }\n`;\n\nexport const StyledErrorMessage = styled(ErrorMessage)`\n  font-size: 16px;\n  font-weight: 700;\n  line-height: 1.16;\n  color: red;\n`;\n\nexport const Button = styled.button`\n  height: 40px;\n  width: 150px;\n  padding: 8px;\n  background-color: orange;\n  border-radius: 4px;\n  border: 2px solid #fff;\n  color: #fff;\n  font-weight: 700;\n  font-size: 16px;\n  line-height: 1.16;\n  text-align: center;\n  letter-spacing: 0.03em;\n  transition: background-color 250ms linear, color 250ms linear,\n    box-shadow 250ms linear;\n  :hover,\n  :focus {\n    box-shadow: 0px 4px 4px rgba(0, 0, 0, 0.15);\n    background-color: #fff;\n    color: orange;\n  }\n`;\n","import PropTypes from 'prop-types';\nimport { useDispatch } from 'react-redux';\nimport { addContact } from 'redux/contacts/contactsOperations';\nimport { useSelector } from 'react-redux/es/exports';\nimport { selectContacts } from 'redux/contacts/contactsSelectors';\nimport { toast } from 'react-toastify';\n\nimport { nanoid } from 'nanoid';\nimport { Formik } from 'formik';\nimport * as yup from 'yup';\nimport 'yup-phone';\n\nimport {\n  StyledForm,\n  Label,\n  Input,\n  StyledErrorMessage,\n  Button,\n} from './ContactForm.styled';\n\nconst schema = yup.object().shape({\n  name: yup.string().required('This field is required'),\n  number: yup\n    .string()\n    .phone(null, true, 'Enter your phone number in the format +000000000000')\n    .required(),\n});\n\nconst idInputName = nanoid();\nconst idInputNumber = nanoid();\n\nconst initialValues = {\n  name: '',\n  number: '',\n};\n\nexport const ContactForm = ({ onClose }) => {\n  const contacts = useSelector(selectContacts);\n  const dispatch = useDispatch();\n\n  const handleSubmit = ({ name, number }, { resetForm }) => {\n    const hasName = contacts.some(\n      contact => contact.name.toLowerCase() === name.toLowerCase()\n    );\n\n    if (hasName) {\n      toast.error(`${name} is alredy in contacts`);\n      return;\n    }\n\n    dispatch(addContact({ name, number }));\n    onClose();\n    resetForm();\n  };\n\n  return (\n    <Formik\n      initialValues={initialValues}\n      validationSchema={schema}\n      onSubmit={handleSubmit}\n    >\n      <StyledForm>\n        <Label htmlFor={idInputName}>Name</Label>\n        <Input id={idInputName} type=\"text\" name=\"name\" placeholder=\"Name\" />\n        <StyledErrorMessage name=\"name\" component=\"p\" />\n\n        <Label htmlFor={idInputNumber}>Number</Label>\n        <Input\n          id={idInputNumber}\n          type=\"tel\"\n          name=\"number\"\n          placeholder=\"+0000000000000\"\n        />\n        <StyledErrorMessage name=\"number\" component=\"p\" />\n\n        <Button type=\"submit\">Add contact</Button>\n      </StyledForm>\n    </Formik>\n  );\n};\n\nContactForm.propTypes = {\n  onClose: PropTypes.func.isRequired,\n};\n","import styled from '@emotion/styled';\n\nimport { IoMdPersonAdd } from 'react-icons/io';\n\nexport const Button = styled.button`\n  margin: 36px auto;\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n  justify-content: space-around;\n\n  padding: 8px 16px;\n  border-radius: 50%;\n\n  width: 100px;\n  height: 100px;\n  padding: 8px;\n  background-color: orange;\n\n  border: 2px solid #fff;\n  color: #fff;\n  font-weight: 700;\n  font-size: 16px;\n  line-height: 1.16;\n  text-align: center;\n  letter-spacing: 0.03em;\n  transition: background-color 250ms linear, color 250ms linear,\n    box-shadow 250ms linear;\n  :hover,\n  :focus {\n    box-shadow: 0px 4px 4px rgba(0, 0, 0, 0.15);\n    background-color: #fff;\n    color: orange;\n  }\n`;\n\nexport const Icon = styled(IoMdPersonAdd)`\n  width: 30px;\n  height: 30px;\n`;\n","import { useState } from 'react';\nimport { Modal } from 'components/Modal';\nimport { ContactForm } from 'components/ContactForm';\nimport { Button, Icon } from './AddButton.styled';\n\nexport const AddButton = () => {\n  const [showModal, setShowmodal] = useState(false);\n\n  const openModal = () => {\n    setShowmodal(true);\n  };\n  const closeModal = () => {\n    setShowmodal(false);\n  };\n  return (\n    <>\n      <Button type=\"button\" onClick={openModal}>\n        <span>Add contact</span> <Icon />\n      </Button>\n      {showModal && (\n        <Modal onClose={closeModal}>\n          <ContactForm onClose={closeModal} />\n        </Modal>\n      )}\n    </>\n  );\n};\n","import { useEffect } from 'react';\nimport { Helmet } from 'react-helmet';\nimport { useDispatch, useSelector } from 'react-redux';\n\nimport { Section } from 'components/Section';\n\nimport { Filter } from 'components/Filter';\nimport { Container } from 'pages/Contacts/Contacts.styled';\nimport { ContactList } from 'components/ContactList';\nimport { Loader } from 'components/Loader';\nimport { Text } from 'pages/Contacts/Contacts.styled';\n\nimport {\n  selectContactsError,\n  selectContactsIsLoading,\n} from 'redux/contacts/contactsSelectors';\nimport { fetchContacts } from 'redux/contacts/contactsOperations';\nimport { AddButton } from 'components/AddButton/AddButton';\n\nconst Contacts = () => {\n  const dispatch = useDispatch();\n  const contactsIsLoading = useSelector(selectContactsIsLoading);\n  const contactsError = useSelector(selectContactsError);\n\n  useEffect(() => {\n    dispatch(fetchContacts());\n  }, [dispatch]);\n\n  return (\n    <main>\n      <Container>\n        <Helmet>\n          <title>Contacts</title>\n        </Helmet>\n\n        <Section title={'Contact List'}>\n          <AddButton />\n          <Filter />\n          {contactsIsLoading && !contactsError && <Loader />}\n          {contactsError && <Text>{contactsError}</Text>}\n          <ContactList />\n        </Section>\n      </Container>\n    </main>\n  );\n};\n\nexport default Contacts;\n"],"names":["SectionStyled","styled","SectionTitle","Section","title","children","selectContacts","state","contacts","items","selectContactsIsLoading","contactsIsLoading","selectContactsError","contactsError","selectContactsFilter","filter","selectVisibleContacts","createSelector","normalizedFilter","toLowerCase","contact","name","includes","FilterStyled","Label","Input","Filter","useSelector","dispatch","useDispatch","type","value","onChange","event","setFilterContacts","currentTarget","Container","Text","ModalBackdrop","ModalContet","modalRoot","document","querySelector","Modal","onClose","useEffect","hendelKeyDown","e","code","window","addEventListener","removeEventListener","createPortal","onClick","target","StyledForm","Form","Field","StyledErrorMessage","ErrorMessage","Button","schema","yup","shape","required","number","phone","idInputName","nanoid","idInputNumber","initialValues","EditForm","validationSchema","onSubmit","resetForm","some","toast","addContact","htmlFor","id","placeholder","component","Item","IconDel","MdDeleteForever","IconEdit","MdModeEditOutline","ContactItem","useState","showModal","setShowmodal","closeModal","size","round","deleteContact","List","ContactList","map","StyledLoader","Loader","height","width","color","wrapperStyle","wrapperClass","visible","ariaLabel","outerCircleColor","innerCircleColor","middleCircleColor","ContactForm","Icon","IoMdPersonAdd","AddButton","fetchContacts","Helmet"],"sourceRoot":""}